from primal_test import *
import math
import time
from random import randint, seed
from equaLin.inv_mod import *
sk = 42

c1 = 27289672770284216189084313969617399472351092171525894891956177254200231549558160671444830716477349201496533903980432978367564820805037483030381827359476291579307620367095469913255040635357008199054089703213149973631556840766539997962509192998118185400674064158732465210283016333347292506607565440697036754897966303863485602560523053216777669426413320032080646355520742760204235622879914491688811991018720816083223492982993833727353763455411500317607192071483831111925709998509540922246954323236753535351187138781872949157437396150189866975368767682803820851581351793998332948632348603009567628319667474236091813063844
p = 32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559
c2 = 21763096471239986971533391057741284241861870696090094446991747476010051391027141866231491721175383028688890915763531572812031903746362974490829058313603223220843856059735943213774874235937059224202282407239262925985169783531378224465143083673966020925812432642246742597536609353746579040275459465661591032362326619713517931651311099331778114640432157902160782318517455871781939379946170977933885088525451891566840199320696118260041372908452653681808863999109825597115786577078297643022086434082186121784479846133187801781435053395453609762047930399177965472998881585679481816739466837919675343452797080225687020687106
a = inv_mod(pow_mod(c1,sk,p),p)
m = c2*a
print(m % p)
#n.to_bytes((n.bit_length() + 7) // 8, 'big') or b'\0' to decrypt ;)


#chosen-ciphertext attack if we want to decrypt (c1,c2) ( the most important is
#c2) and we have an oracle that decrypt all (a,b) != (c1,c2)
# we can build (c1,2*c2) we realy only mutiply c2 by 2 and this new cipher is
# also correct so we can give it to the orcale and get m the decrypt message
#and finnaly the real cleartext message is m/2 once agin juste divide by 2
